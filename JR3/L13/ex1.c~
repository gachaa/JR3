#include<stdio.h>
#include<stdlib.h>
char buf[128];
struct student { int id; char name[32]; int score; };
typedef struct student datatype; 
struct rb_node { datatype data; struct rb_node *left, *right; int black; };

struct rb_node* get_rbtree() {
struct rb_node *t;
 char c;
 if(fgets(buf,sizeof(buf),stdin)==NULL || buf[0]=='.')
   return NULL;
 else {
   t = (struct rb_node*)malloc(sizeof(struct rb_node));
   sscanf(buf,"[%c]%d,%[^,],%d",&c,&t->data.id,t->data.name,&t->data.score);
   t->black = (c=='b');
   t->left = get_rbtree(); t->right = get_rbtree();
   return t;
 }
}

//高さを返す
int height(struct avl_node *t) {
  if(t == NULL) return 0;
  else return t->height;
}

//右の子と左の子から、tの高さを設定
void put_height(struct avl_node *t) {
  if(height(t->left) > height(t->right)) {
    t->height = height(t->left) + 1;
  } else {
    t->height = height(t->right) + 1;
  }
}

struct avl_node* rotate_right(struct avl_node *t) {
  struct avl_node *preRoot = t;

  if(t->left == NULL) return t;

  t = t->left;
  preRoot->left = t->right;
  t->right = preRoot;

  put_height(preRoot);
  put_height(t);
  
  return t;
}

struct avl_node* rotate_left(struct avl_node *t) {
  struct avl_node *preRoot = t;

  if(t->right == NULL) return t;

  t = t->right;
  preRoot->right = t->left;
  t->left = preRoot;

  put_height(preRoot);
  put_height(t);

  return t;
}

void print_rbtree(struct rb_node *t) {
  if(t==NULL) printf(".\n");
  else {
    printf("[%c]%d,%s,%d\n",t->black?'b':'r',t->data.id,t->data.name,t->data.score);
    print_rbtree(t->left); print_rbtree(t->right);
  }
}

int main() {
  struct rb_node *t;
  char c;
  scanf("%c␣",&c);
  t = get_rbtree();
  if(c=='R') t = rotate_right(t); 
  else if(c=='L') t = rotate_left(t); 
  print_rbtree(t);
  return 0;
}
